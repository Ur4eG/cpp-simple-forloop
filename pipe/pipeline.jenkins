#!groovy

properties([disableConcurrentBuilds()])

//new_version=$(($version+1))

//output_name=${BRANCH_ID}.${release}_${new_version}
//echo output_name=${output_name} > vars.props

pipeline {
  agent {
    label 'master'
  }
  parameters {
    string(name: 'BRANCH', defaultValue: '', description: 'branch name to pull')
    string(name: 'RELEASE', defaultValue: '', description: 'release type eg stable')
    string(name: 'DT', defaultValue: '', description: 'date in the file')
    string(name: 'VERSION', defaultValue: '', description: 'version')
    string(name: 'VERSION_UP', defaultValue: '', description: 'incremented version')
    string(name: 'OUTPUT_FILE', defaultValue: '', description: 'filename after build')
  }
  //triggers{ cron('H/15 * * * *') }
  options {
    timestamps()
  }
  stages {
    stage("First step") {
      steps {
        sh 'uname -a'
        echo 'FIRST STEP'
        sh "ls -lat"
        //        println workspace
      }
    }
    stage("Getting last version from Git") {
      steps {
        git branch: 'test1',
            url: 'https://github.com/Ur4eG/cpp-simple-forloop.git'
        echo 'SECOND STEP'
        sh "cat Version"
        echo '-----------------'
        script {
          env.BRANCH = 'temp1'
          env.RELEASE = sh (script: 'cat Version|grep -i release|cut -f 2 -d ":"|sed \'s/^ *//g\'', returnStdout: true).trim()
          env.DT = sh (script: 'cat Version|grep -i date|cut -f 2 -d ":"|sed \'s/^ *//g\'', returnStdout: true).trim()
          env.VERSION = sh (script: 'cat Version|grep -i version|cut -f 2 -d ":"|sed \'s/^ *//g\'', returnStdout: true).trim()
          env.VERSION_UP = sh (script: 'echo $(($VERSION + 1))',returnStdout: true).trim()
        }

      }
    }
    stage("THIRD STEP") {
      steps {
        echo 'THIRD STEP'
        echo "branch id is ${env.BRANCH}"
        echo "release id is ${env.RELEASE}"
        echo "date id is ${env.DT}"
        echo "version id is ${env.VERSION}"
        echo "version id is ${env.VERSION_UP}"

        sh "mkdir -p build"
        sh "cc bin/Main.c -o build/${env.BRANCH}.${env.RELEASE}_${env.VERSION}"
        sh "ls -la build"
      }
    }

  }
}
